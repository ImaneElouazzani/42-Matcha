{"ast":null,"code":"/**\n * Expose `Compiler`.\n */\nmodule.exports = Compiler;\n/**\n * Initialize a compiler.\n *\n * @param {Type} name\n * @return {Type}\n * @api public\n */\n\nfunction Compiler(opts) {\n  this.options = opts || {};\n}\n/**\n * Emit `str`\n */\n\n\nCompiler.prototype.emit = function (str) {\n  return str;\n};\n/**\n * Visit `node`.\n */\n\n\nCompiler.prototype.visit = function (node) {\n  return this[node.type](node);\n};\n/**\n * Map visit over array of `nodes`, optionally using a `delim`\n */\n\n\nCompiler.prototype.mapVisit = function (nodes, delim) {\n  var buf = '';\n  delim = delim || '';\n\n  for (var i = 0, length = nodes.length; i < length; i++) {\n    buf += this.visit(nodes[i]);\n    if (delim && i < length - 1) buf += this.emit(delim);\n  }\n\n  return buf;\n};","map":{"version":3,"sources":["/Users/ielouazz/Desktop/matcha/client/node_modules/css/lib/stringify/compiler.js"],"names":["module","exports","Compiler","opts","options","prototype","emit","str","visit","node","type","mapVisit","nodes","delim","buf","i","length"],"mappings":"AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiBC,QAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,OAAKC,OAAL,GAAeD,IAAI,IAAI,EAAvB;AACD;AAED;AACA;AACA;;;AAEAD,QAAQ,CAACG,SAAT,CAAmBC,IAAnB,GAA0B,UAASC,GAAT,EAAc;AACtC,SAAOA,GAAP;AACD,CAFD;AAIA;AACA;AACA;;;AAEAL,QAAQ,CAACG,SAAT,CAAmBG,KAAnB,GAA2B,UAASC,IAAT,EAAc;AACvC,SAAO,KAAKA,IAAI,CAACC,IAAV,EAAgBD,IAAhB,CAAP;AACD,CAFD;AAIA;AACA;AACA;;;AAEAP,QAAQ,CAACG,SAAT,CAAmBM,QAAnB,GAA8B,UAASC,KAAT,EAAgBC,KAAhB,EAAsB;AAClD,MAAIC,GAAG,GAAG,EAAV;AACAD,EAAAA,KAAK,GAAGA,KAAK,IAAI,EAAjB;;AAEA,OAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAGJ,KAAK,CAACI,MAA/B,EAAuCD,CAAC,GAAGC,MAA3C,EAAmDD,CAAC,EAApD,EAAwD;AACtDD,IAAAA,GAAG,IAAI,KAAKN,KAAL,CAAWI,KAAK,CAACG,CAAD,CAAhB,CAAP;AACA,QAAIF,KAAK,IAAIE,CAAC,GAAGC,MAAM,GAAG,CAA1B,EAA6BF,GAAG,IAAI,KAAKR,IAAL,CAAUO,KAAV,CAAP;AAC9B;;AAED,SAAOC,GAAP;AACD,CAVD","sourcesContent":["\n/**\n * Expose `Compiler`.\n */\n\nmodule.exports = Compiler;\n\n/**\n * Initialize a compiler.\n *\n * @param {Type} name\n * @return {Type}\n * @api public\n */\n\nfunction Compiler(opts) {\n  this.options = opts || {};\n}\n\n/**\n * Emit `str`\n */\n\nCompiler.prototype.emit = function(str) {\n  return str;\n};\n\n/**\n * Visit `node`.\n */\n\nCompiler.prototype.visit = function(node){\n  return this[node.type](node);\n};\n\n/**\n * Map visit over array of `nodes`, optionally using a `delim`\n */\n\nCompiler.prototype.mapVisit = function(nodes, delim){\n  var buf = '';\n  delim = delim || '';\n\n  for (var i = 0, length = nodes.length; i < length; i++) {\n    buf += this.visit(nodes[i]);\n    if (delim && i < length - 1) buf += this.emit(delim);\n  }\n\n  return buf;\n};\n"]},"metadata":{},"sourceType":"script"}